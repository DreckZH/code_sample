int BinarySearch(int key, int a[])
{
	int lo = 0, hi = 10-1;
	while (lo <= hi)
	{	
		int mid = lo + (hi - lo) / 2;
		if (key>a[mid])
			lo = mid + 1;
		else if (key < a[mid])
			hi = mid - 1;
		else
			return mid;

	}
	return -1;
}

void SelectSort(int a[])
{
	int N = /*sizeof(a)*/10;
	for (int i = 0; i < N; i++)
	{		
		for (int j = i + 1; j < N; j++)
		{
			if (a[j] < a[i])
			{
				int t = a[i];
				a[i] = a[j];
				a[j] = t;
			}
		}
	}
	for (int c = 0; c < N; c++)
		std::cout << a[c] << std::endl;
}

void InsertSort(int a[])
{
	int N = 10/*len*/;
	for (int i = 1; i < N; i++)
	{
		for (int j = i; j > 0 && a[j] > a[j - 1]; j--){
			int t = a[j];
			a[j] = a[j - 1];
			a[j - 1] = t;
		}
	}
	for (int c = 0; c < N; c++)
		std::cout << a[c] << std::endl;
}
void BubbleSort(int a[])
{
for(int i=0;i<N-1;i++)//要进行n-1趟，每趟冒泡1个元素
	{
		for(int j=0;j<N-i;j++)//每趟比较n-i个数，其他i个已经冒泡排好
		{
			if(a[j] < a[j+1]){
				t=a[j];
				a[j]=a[j+1];
				a[j+1]=t;
			}
		}
	}
}
void ShellSort(int a[])
{

}

int main(int argc, char *argv[])
{	
	int l[] = {14,501,8,9,154,2,52,14,8,142};
	/*int index = BinarySearch(2, l);*/
	//SelectSort(l);
	//InsertSort(l);

	return a.exec();
}